name: run-tests

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DSTATIC=ON

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: |
        cmake --build . --config $BUILD_TYPE -- -j2
        ls -la

    - name: Upload HAZ artifact
      uses: actions/upload-artifact@v3
      with:
        name: HAZ
        path: ${{github.workspace}}/build/HAZ
        retention-days: 5
  # See:
  #  - https://www.cynkra.com/2020/12/23/dynamic-gha/index.html
  #  - https://stackoverflow.com/questions/65056670
  find-cases:
    runs-on: ubuntu-latest
    outputs:
      cases: ${{ steps.set-cases.outputs.cases }}
    steps:
      - uses: actions/checkout@v3

      - id: set-cases
        working-directory: ${{github.workspace}}/tests
        run: |
          cases=$(ls -d peer/set-1/* peer/set-2/* | jq -cnR '[inputs | select(length>0)]')
          echo "cases=$cases" >> $GITHUB_OUTPUT

  check-cases:
    runs-on: ubuntu-latest
    needs: find-cases
    steps:
      - name: Check located test cases
        run: |
          cases='${{ needs.find-cases.outputs.cases }}'
          echo $cases
          echo $cases | jq .

  test:
    runs-on: ubuntu-latest
    needs: [find-cases, build]
    env:
      PYTHON_VERSION: 3.8
    defaults:
      run:
        working-directory: ${{github.workspace}}/scripts
    strategy:
      fail-fast: false
      matrix:
        case: ${{ fromJson(needs.find-cases.outputs.cases) }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
            # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Create Test Environment
        shell: bash
        run: |
          ls -la
          python -m pip install --upgrade pip
          pip install wheel
          pip install -r requirements.txt

      - name: Download a HAZ artifact
        uses: actions/download-artifact@v3
        with:
          name: HAZ
          path: ${{github.workspace}}/scripts

      - name: Perform Tests
        run: |
          # Permissions reset on downloading artifact
          chmod +x HAZ
          ls -lha
          python run_tests.py -f --haz_bin ./HAZ --rtol 0.005 ${{ matrix.case }}
